; vim: ft=nasm ts=2 sw=2 expandtab
%ifndef INTERRUPTS_H
%define INTERRUPTS_H


extern idt_descriptor
extern set_int_handler
extern initialize_pic


%macro end_of_interrupt 1
  mov al, 0x20 ;; end-of-interrupt code
  %if %1 >= 8
    out 0xa0, al
    out 0x20, al
  %else
    out 0x20, al
  %endif
%endmacro


%ifndef __current_interrupt_mask_master
 %xdefine __current_interrupt_mask_master 11111111b
 %xdefine __current_interrupt_mask_slave 11111111b
%endif

;; tell pic to unmask pin number %1 (0-15)
%macro pic_unmask 1
 %if %1 < 8
   %xdefine __current_interrupt_mask_master (~(1 << %1) & __current_interrupt_mask_master)
   set_interrupt_mask_plain  __current_interrupt_mask_master
 %else
   %xdefine __current_interrupt_mask_slave (~(1 << (%1 - 8)) & __current_interrupt_mask_slave)
   set_interrupt_mask_plain (__current_interrupt_mask_slave << 8)
 %endif
%endmacro

;; tell pic to mask pin number %1 (0-15)
%macro pic_mask 1
 %if %1 < 8
   %xdefine __current_interrupt_mask_master ((1 << %1) | __current_interrupt_mask_master)
   set_interrupt_mask_plain  __current_interrupt_mask_master
 %else
   %xdefine __current_interrupt_mask_slave ((1 << (%1 - 8)) | __current_interrupt_mask_slave)
   set_interrupt_mask_plain (__current_interrupt_mask_slave << 8)
 %endif
%endmacro

%macro set_interrupt_mask_plain 1
  %if %1 > 0xff
    mov al, (%1 >> 8)
    out 0xa1, al
  %else
    mov al, %1
    out 0x21, al
  %endif
%endmacro


%endif ;; INTERRUPTS_H
